{"version":3,"sources":["components/CityPostal.js","App.js","serviceWorker.js","index.js"],"names":["CityPostal","useState","city","setCity","code","setCode","useEffect","length","axios","get","then","res","data","catch","err","console","log","className","placeholder","onChange","e","target","value","type","required","minLength","maxLength","map","el","index","key","nom","population","surface","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kPAoDeA,EAjDI,WAAO,IAAD,EACCC,mBAAS,IADV,mBAChBC,EADgB,KACVC,EADU,OAECF,mBAAS,IAFV,mBAEhBG,EAFgB,KAEVC,EAFU,KAoBvB,OAhBAC,qBAAU,WACY,IAAhBF,EAAKG,QACPC,IACGC,IADH,sDAEmDL,EAFnD,4FAIGM,MAAK,SAAAC,GACJ,IAAMC,EAAOD,EAAIC,KACjBT,EAAQS,MAETC,OAAM,SAAAC,GACLC,QAAQC,IAAI,WAAYF,QAG7B,CAACV,IAGF,yBAAKa,UAAU,mBACb,2BACEC,YAAY,gBACZC,SAAU,SAAAC,GACRf,EAAQe,EAAEC,OAAOC,QAEnBC,KAAK,OACLD,MAAOlB,EACPoB,UAAQ,EACRC,UAAU,IACVC,UAAU,MAEZ,yBAAKT,UAAU,aACZf,EAAKyB,KAAI,SAACC,EAAIC,GACb,OACE,yBAAKZ,UAAU,mBAAmBa,IAAKD,GACrC,uCAAaD,EAAGG,KAChB,qCAAWH,EAAGxB,MACd,2CAAiBwB,EAAGI,YACpB,wCAAcJ,EAAGK,gBC7BhBC,MAVf,WACE,OACE,yBAAKjB,UAAU,YACb,oCAEA,kBAAC,EAAD,Q,MCGckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.b3ed7d60.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst CityPostal = () => {\n  const [city, setCity] = useState([]);\n  const [code, setCode] = useState(\"\");\n\n  useEffect(() => {\n    if (code.length === 5) {\n      axios\n        .get(\n          `https://geo.api.gouv.fr/communes?codePostal=${code}&fields=nom,code,codesPostaux,surface,codeRegion,population&format=json&geometry=centre`\n        )\n        .then(res => {\n          const data = res.data;\n          setCity(data);\n        })\n        .catch(err => {\n          console.log(\"err :>> \", err);\n        });\n    }\n  }, [code]);\n\n  return (\n    <div className=\"main-div--input\">\n      <input\n        placeholder=\"code postal..\"\n        onChange={e => {\n          setCode(e.target.value);\n        }}\n        type=\"text\"\n        value={code}\n        required\n        minLength=\"5\"\n        maxLength=\"5\"\n      />\n      <div className=\"container\">\n        {city.map((el, index) => {\n          return (\n            <div className=\"main-div--render\" key={index}>\n              <h3>Ville : {el.nom}</h3>\n              <p>code : {el.code}</p>\n              <p>population : {el.population}</p>\n              <p>surface : {el.surface}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default CityPostal;\n","import React from \"react\";\n\nimport CityPostal from \"./components/CityPostal\";\n\nfunction App() {\n  return (\n    <div className=\"main-div\">\n      <h1>City</h1>\n\n      <CityPostal />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./sass/style.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}